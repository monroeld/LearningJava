shiny::runApp()
require(shiny)
require(ggplot2)
require(ggrepel)
require(ggExtra)
require(plyr)
require(dplyr)
require(tidyr)
require(gridExtra)
require(reshape2)
require(RColorBrewer)
require(rstudioapi)
require(data.table)
histalpha <- 0.45
scatteralpha <- histalpha * 2/3
fluorlist <- c("FAM", "HEX", "Cy5")
welltotal <- 1024
basepath <- getwd()
serverinput = basepath
serveroutput = basepath
lappend <- function(lst, obj) {
lst[[length(lst)+1]] <- obj
return(lst)
}
linksubset <- 0
rowcolremove <- FALSE
Alldata <<- read.csv(file = "Compiled_Shiny_Data.csv", header = TRUE, sep = ",",
stringsAsFactors = FALSE)
View(Alldata)
?read.csv
Alldata <- Alldata[, select = -c("X")]
Alldata <- subset(Alldata, select = -c("X"))
subset(Alldata, select = -c("X"))
colnames(Alldata)
?subset
Alldata <- subset(Alldata, select = -c(X))
maintest <- "1, 2:4, 7"
test <- gsub(" ", "", maintest)
test
test2 <- c(sapply(test, function(x)
if (grepl(":", x)) {
test <- c(test, seq(as.numeric(c(unlist(strsplit(x, ":"))))[1],
as.numeric(c(unlist(strsplit(x, ":"))))[2], 1))
}
)
)
grepl(":", test)
test2 <- c(sapply(test, function(x)
if (grepl(":", x)) {
test <- c(test, seq(as.numeric(c(unlist(strsplit(x, ":"))))[1],
as.numeric(c(unlist(strsplit(x, ":"))))[2], 1))
}
)
)
test2 <- c(lapply(test, function(x)
if (grepl(":", x)) {
test <- c(test, seq(as.numeric(c(unlist(strsplit(x, ":"))))[1],
as.numeric(c(unlist(strsplit(x, ":"))))[2], 1))
}
)
)
x <- test[2]
x
test
maintest <- "1, 2:4, 7"
test <- gsub(" ", "", maintest)
test <- c(sapply(test, function(x)
if (grepl(",", x)) {
c(unlist(strsplit(x, ",")))
}
)
)
test
test2 <- c(lapply(test, function(x)
if (grepl(":", x)) {
test <- c(test, seq(as.numeric(c(unlist(strsplit(x, ":"))))[1],
as.numeric(c(unlist(strsplit(x, ":"))))[2], 1))
}
)
)
test2
test2 <- c(lapply(test, function(x)
if (grepl(":", x)) {
storage <- c(test, seq(as.numeric(c(unlist(strsplit(x, ":"))))[1],
as.numeric(c(unlist(strsplit(x, ":"))))[2], 1))
}
)
)
test2
test <- gsub(" ", "", maintest)
test <- c(sapply(test, function(x)
if (grepl(",", x)) {
c(unlist(strsplit(x, ",")))
}
)
)
test2 <- c(lapply(test, function(x)
if (grepl(":", x)) {
storage <- c(test, seq(as.numeric(c(unlist(strsplit(x, ":"))))[1],
as.numeric(c(unlist(strsplit(x, ":"))))[2], 1))
}
)
)
storage
test2
test2 <- c(lapply(test, function(x)
if (grepl(":", x)) {
storage <- c(seq(as.numeric(c(unlist(strsplit(x, ":"))))[1],
as.numeric(c(unlist(strsplit(x, ":"))))[2], 1))
}
)
)
test2
test2 <- c(lapply(test, function(x)
if (grepl(":", x)) {
storage <- c(seq(as.numeric(c(unlist(strsplit(x, ":"))))[1],
as.numeric(c(unlist(strsplit(x, ":"))))[2], 1))
} else {
storage <- c(x)
}
)
)
test2
test2 <- c(lapply(test, function(x)
if (grepl(":", x)) {
storage <- c(seq(as.numeric(c(unlist(strsplit(x, ":"))))[1],
as.numeric(c(unlist(strsplit(x, ":"))))[2], 1))
} else {
storage <- c(as.numeric(x))
}
)
)
test2
maintest <- "1, 2:4, 7"
test <- gsub(" ", "", maintest)
test <- c(sapply(test, function(x)
if (grepl(",", x)) {
c(unlist(strsplit(x, ",")))
}
)
)
test2 <- c(unlist(lapply(test, function(x)
if (grepl(":", x)) {
storage <- c(seq(as.numeric(c(unlist(strsplit(x, ":"))))[1],
as.numeric(c(unlist(strsplit(x, ":"))))[2], 1))
} else {
storage <- c(as.numeric(x))
}
)
))
test2
userinput <- "1, 2:4, 7"
userinput
nospaces <- gsub(" ", "", userinput)
nocommas <- c(sapply(nospaces, function(x)
if (grepl(",", x)) {
c(unlist(strsplit(x, ",")))
}
)
)
nocolons <- c(unlist(lapply(nocommas, function(x)
if (grepl(":", x)) {
storage <- c(seq(as.numeric(c(unlist(strsplit(x, ":"))))[1],
as.numeric(c(unlist(strsplit(x, ":"))))[2], 1))
} else {
storage <- c(as.numeric(x))
}
)))
nospaces
nocommas
nocolons
unique(Alldata$Column)
unique(Alldata$Row)
Row %in% nocolons
test <- subset(Alldata, !(Row %in% nocolons))
unique(test$Row)
test2 <- subset(Alldata, !(Row %in% userinput))
test3 <- subset(Alldata, !(Row %in% nocommas))
rm(test2)
rm(test3)
runApp()
runApp()
runApp()
runApp()
test <- data.frame(c(60, 191, 191), c(707, 815, 514))
test
colnames(test) <- "0%"
colnames(test) <- c("0%", "0.02%")
test
rownames(test) <- c("WT", "HET", "MUT")
test
test <- rbind(test, c(5, 17))\
test <- rbind(test, c(5, 17))
test
rownames(test)[4] <- "Arrays"
test
test <- t(test)
test
?prop.test
?chisq.test
test <- mutate(test, fracWT = WT/(WT+HET+MUT))
typeof(test)
test <- as.data.frame(test)
test
test <- mutate(test, fracWT = WT/(WT+HET+MUT))
test
test <- mutate(test, fracMUT = MUT/(WT+HET+MUT))
teest
test
test <- mutate(test, fracHET = HET/(WT + HET + MUT))
test
test <- mutate(test, numCells = HET + WT + MUT)
test
?ttest
?t.test()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?order
?aes_string
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
